module SeqLogicBlock1_Mod (
    input  logic clk,
    input  logic rst_n,
    input  logic [7:0] seed,
    output logic [7:0] out_val
);

    typedef enum logic [1:0] {IDLE, LOAD, SHIFT, DONE} state_t;
    state_t state;
    logic [7:0] lfsr;

    always_ff @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            state <= IDLE;
            lfsr  <= 8'h01;
        end else begin
            case (state)
                IDLE:  begin state <= LOAD; end
                LOAD:  begin lfsr <= seed; state <= SHIFT; end
                SHIFT: begin
                    lfsr <= {lfsr[6:0], lfsr[7] ^ lfsr[5]};
                    if (lfsr[0]) state <= DONE;
                end
                DONE:  begin state <= IDLE; end
            endcase
        end
    end

    assign out_val = lfsr;

endmodule
